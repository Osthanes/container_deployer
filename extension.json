{
    "id": "ibm.devops.services.pipeline.docker.deploy.ice",
    "version": 2,
    "name_key": "ExtName",
    "desc_key": "ExtDesc",
    "extension_type": "Deploy",
    "inputs": [
        {
            "type": "Artifacts",
            "inclusion" : "always"
        },
        {
            "type": "Bluemix",
            "inclusion" : "always"
        }
    ],
    "params": [
        {
            "name": "DEPLOY_TYPE",
            "type": "Text",
            "required": "false",
            "default_value": "red_black",
            "label_key": "DEPLOY_TYPE_KEY",
            "desc_key": "DEPLOY_TYPE_DESC"
        },        
        {
            "name": "CONTAINER_NAME",
            "type": "Text",
            "required": "true",
            "default_value": "myApplicationName",
            "label_key": "CONTAINER_NAME_KEY",
            "desc_key": "CONTAINER_NAME_DESC"
        },        
        {
            "name": "PORT",
            "type": "Text",
            "required": "false",
            "default_value": "80",
            "label_key": "PORT_KEY",
            "desc_key": "PORT_DESC"
        },
        {
            "name": "COMMAND",
            "type": "TextArea",
            "required": "true",
            "default_value" : "#!/bin/bash
# The following are some example deployment scripts.  Use these as is or fork them and include your updates here: 
echo -e \"${label_color}Starting deployment script${no_color}\"

# To view/fork this script goto: https://github.com/Osthanes/deployscripts
git clone https://github.com/Osthanes/deployscripts.git deployscripts

# You can deploy your Image as either a single Container or as a Container Group.  A Container Group deploys a number of containers which is defined by the GROUP_DESIRED property on the Stage.
# By default we will deploy as a single container 


# Deploy with containers (optionally define BIND_TO on the environment to bind an application with services) 
/bin/bash deployscripts/deploycontainer.sh 

# Deploy Container Group (define ROUTE_HOSTNAME, ROUTE_DOMAIN, BIND_TO, DESIRED on the environment 
# IF YOU WANT CONTAINER GROUPS .. uncomment the next line, and comment out the previous deployment line (/bin/bash deployscripts/deploygroup.sh)
#/bin/bash deployscripts/deploygroup.sh 


RESULT=$?

#########################
# Environment DETAILS   #
#########################
# The environment has been setup.  
# The Cloud Foundry CLI (cf), IBM Container Service CLI (ice), Git client (git), IDS Inventory CLI (ids-inv) and Python 2.7.3 (python) have been installed.
# Based on the organization and space selected in the Job credentials are in place for both IBM Container Service and IBM Bluemix 

# The following colors have been defined to help with presentation of logs: green, red, label_color, no_color.  
if [ $RESULT -ne 0 ]; then
    echo -e \"${red}Executed failed or had warnings ${no_color}\"
    ${EXT_DIR}/print_help.sh
    exit $RESULT
fi 
echo -e \"${green}Execution complete${no_label}\"",
            "label_key": "COMMAND_KEY",
            "desc_key": "COMMAND_DESC"
        }
    ],
    "outputs": [
    ],
    "execution": {
        "type": "JenkinsDocker",
        "shell": "#!/bin/bash
set +x 
set +e 
export DEPLOY_TYPE=#DEPLOY_TYPE#
export CONTAINER_NAME=#CONTAINER_NAME#
export PORT=#PORT#
. $EXT_DIR/_init.sh
/bin/bash -e #COMMAND#"
    }
    },
    "project": "https://hub.jazz.net/project/rjminsha/pipeline_service_docker_deployer_ice",
    "project_example": "https://hub.jazz.net/pipeline/rjminsha/ice-pipeline_demo",
    "project_contact": "rjminsha@us.ibm.com"
}